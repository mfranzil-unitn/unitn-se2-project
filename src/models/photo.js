const db = require('.');

const queries = {
    insert: "INSERT INTO photo (photo_review_id, photo_path) VALUES ($1, $2)",
    update: "UPDATE photo SET (photo_review_id, photo_path) = ($2, $3) WHERE photo_id = $1;",
    delete: "DELETE FROM photo WHERE photo_id = $1;",
    getByPrimaryKey: "SELECT * FROM photo WHERE photo_id = $1",
    getAll: "SELECT * FROM photo;",
    getCount: "SELECT COUNT(*) FROM photo;"
};

// photo = { photo_id : Number, photo_review_id : Number, photo_path : String };
// photo_id is autogenerated by Postgres
// photo_review_id is a foreign key to Review

module.exports = {
    insert: async ({ photo_review_id, photo_path }) => {
        try {
            let res = await db.executeQuery(queries.insert, photo_review_id, photo_path);
            return res.rows[0].photo_id;
        } catch (error) {
            return -1;
        }
    },
    update: async ({ photo_id, photo_review_id, photo_path }) => {
        try {
            let res = await db.executeQuery(queries.update, photo_id, photo_review_id, photo_path);
            return res.rowCount;
        } catch (error) {
            return -1;
        }
    },
    delete: async (primaryKey) => {
        try {
            let res = await db.executeQuery(queries.delete, primaryKey);
            return res.rowCount;
        } catch (error) {
            return -1;
        }
    },
    getByPrimaryKey: async (primaryKey) => {
        try {
            let res = await db.executeQuery(queries.getByPrimaryKey, primaryKey);
            return res.rows === 1 ? res.rows[0] : undefined;
        } catch (error) {
            return undefined;
        }
    },
    getAll: async () => {
        try {
            let res = await db.executeQuery(queries.getAll);
            return res.rows;
        } catch (error) {
            return undefined;
        }
    },
    getCount: async () => {
        try {
            let res = await db.executeQuery(queries.getCount);
            return res.rows;
        } catch (error) {
            return undefined;
        }
    }
}