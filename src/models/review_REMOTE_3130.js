const db = require('.');

const queries = {
    insert: "INSERT INTO review (review_user_id, review_line_id, review_rating, review_description)"
        + " VALUES ($1, $2, $3, $4)",
    update: "UPDATE review SET (review_user_id, review_line_id, review_rating, review_description)"
        + " = ($2, $3, $4, $5) WHERE review_id = $1;",
    delete: "DELETE FROM review WHERE review_id = $1;",
    getByPrimaryKey: "SELECT * FROM review WHERE review_id = $1",
    getAll: "SELECT * FROM review;",
    getCount: "SELECT COUNT(*) FROM review;"
};

// review = {review_id : Number,  review_user_id : String, 
//           review_line_id : Number, review_rating : Number, review_description: String}
// review_id is autogenerated by Postgres
// review_user_id is a foreign key to User
// review_line_id is a foreign key to Line
// review_rating is Numeric(2,1) (es. 1.2)

module.exports = {
    insert: async ({ review_user_id, review_line_id, review_rating, review_description }) => {
        try {
            let res = await db.executeQuery(queries.insert, review_user_id, review_line_id,
                review_rating, review_description);
                return res.rows[0].review_id;
        } catch (error) {
            return -1;
        }
    },
    update: async ({ review_id, review_user_id, review_line_id, review_rating, review_description }) => {
        try {
            let res = await db.executeQuery(queries.update, review_id, review_user_id, review_line_id,
                review_rating, review_description);
            return res.rowCount;
        } catch (error) {
            return -1;
        }
    },
    delete: async (primaryKey) => {
        try {
            let res = await db.executeQuery(queries.delete, primaryKey);
            return res.rowCount;
        } catch (error) {
            return -1;
        }
    },
    getByPrimaryKey: async (primaryKey) => {
        try {
            let res = await db.executeQuery(queries.getByPrimaryKey, primaryKey);
            return res.rows === 1 ? res.rows[0] : undefined;
        } catch (error) {
            return undefined;
        }
    },
    getAll: async () => {
        try {
            let res = await db.executeQuery(queries.getAll);
            return res.rows;
        } catch (error) {
            return undefined;
        }
    },
    getCount: async () => {
        try {
            let res = await db.executeQuery(queries.getCount);
            return res.rows;
        } catch (error) {
            return undefined;
        }
    }
}