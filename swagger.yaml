openapi: 3.0.1
info:
  title: SlackApp
  description: SlackApp is an application that proposes to create a virtual space
    for [slackliners](https://en.wikipedia.org/wiki/Slacklining) where they can share
    their slackline position with other members, along with rating and reviewing them
    on a map.

    To get started, POST to /signup with a new user_id, user_name and user_password and
    authenticate with /login.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: "v1"
servers:
- url: https://se2-project.herokuapp.com/api/v1/users
tags:
- name: auth
  description: APIs for creating new users and authenticating to the system
- name: users
  description: APIs for retrieving users
- name: line
  description: APIs for creating and retrieving lines
- name: review
  description: APIs for creating and retrieving reviews
- name: photo
  description: APIs for adding and retrieving photos
- name: chats
  description: APIs for creating, joining, removing chats and sending and receiving messages

paths:
  /signup:
    post:
      tags:
      - auth
      summary: Creates a new user in the system.
      operationId: signup
      parameters:
      - name: user_id
        in: query
        description: The userID to log in with
        required: true
        schema:
          type: string
      - name: user_name
        in: query
        description: The displayed name for the user
        required: true
        schema:
          type: string
      - name: user_password
        in: query
        description: The password matching the userID
        required: true
        schema:
          type: string
      responses:
        201:
          description: User successfully created
        400:
          description: Bad request (invalid number of parameters or content)
        409:
          description: User already present in the system with this ID
  /login:
    post:
      tags:
      - auth
      summary: Authenticates an user using ID and password.
      operationId: login
      parameters:
      - name: user_id
        in: query
        description: The userID to log in with
        required: true
        schema:
          type: string
      - name: user_password
        in: query
        description: The password matching the userID
        required: true
        schema:
          type: string
      responses:
        204:
          description: User successfully logged in
        400:
          description: Invalid parameters
        422:
          description: Non-existant combination of userID and password
  /chats:
    post:
      tags:
      - chats
      summary: Creates a new chat and automatically inserts the creating user into it.
      operationId: createChat
      parameters:
      - name: user_id
        in: query
        required: true
        description: The userID of the currently logged in user, that will be inserted automatically in the newly created chat.
        schema:
          type: string
      - name: chat_name
        in: query
        required: true
        description: The name of the chat to be created.
        schema:
          type: string
      responses:
        201:
          description: The chat was successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  chat_id:
                    type: integer
                    description: The chatID of the newly created chat.
        400:
          description: Invalid parameters.
        401:
          description: Either the user isn't logged in or used a user_id parameter that is not theirs.
        500:
          description: Internal server error.         
  /chats/{chat_id}:
    post:
      tags:
      - chats
      summary: Sends a message in a chat.
      operationId: sendMessage
      parameters:
      - name: user_id
        in: query
        required: true
        description: The userID of the currently logged in user, that will be inserted automatically in the newly created chat.
        schema:
          type: string
      - name: chat_id
        in: path
        required: true
        description: The chatID of the selected chat.
        schema:
          type: integer
      - name: message_text
        in: query
        description: The content of the message to be sent.
        required: true
        schema:
          type: string
      responses:
        201:
          description: The message was successfully sent.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message_id:
                    type: string
                    description: The messageID of the newly created message.
        400:
          description: Invalid parameters.
        401:
          description: Either the user isn't logged in or used a user_id parameter that is not theirs.
        500:
          description: Internal server error.
    get:
      tags:
      - chats
      summary: Gets a number of messages, listed in anti-chronological order from the latest, from a chat.
      operationId: getMessages
      parameters:
      - name: user_id
        in: query
        required: true
        description: The userID of the currently logged in user, that will be inserted automatically in the newly created chat.
        schema:
          type: string
      - name: chat_id
        in: path
        required: true
        description: The chatID of the selected chat.
        schema:
          type: integer
      - name: limit
        in: query
        description: The maximum number of elements to be returned.
        required: true
        schema:
          type: integer
      - name: offset
        in: query
        description: The offset from where to start querying the elements.
        required: true
        schema:
          type: integer
      responses:
        200:
          description: The list of messages, listed in antichronological order, and the total number of messages present in the chat.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                  metadata:
                    type: object
                    properties:
                      total:
                        type: integer
        400:
          description: Invalid parameters.
        401:
          description: Either the user isn't logged in or used a user_id parameter that is not theirs.
    patch:
      tags:
      - chats
      summary: Joins an existing chat.
      operationId: joinChat
      parameters:
      - name: user_id
        in: query
        required: true
        description: The userID of the currently logged in user, that will be inserted automatically in the newly created chat.
        schema:
          type: string
      - name: chat_id
        in: path
        required: true
        description: The chatID of the selected chat.
        schema:
          type: integer
      responses:
        201:
          description: Returns the updated representation of the chat with its member list.
          content:
            application/json:
              schema:
                type: object
                properties:
                  chat_id:
                    type: string
                    description: The chatID of the joined chat.
                  chat_name:
                    type: string
                    description: The chat name of the joined chat.
                  users:
                    type: array
                    description: The chat members, listed by their userID.
                    items:
                      type: string
        400:
          description: Invalid parameters.
        401:
          description: Either the user isn't logged in or used a user_id parameter that is not theirs.
        500:
          description: Internal server error.   
    delete:
      tags:
      - chats
      summary: Leaves a chat, deleting it if no members are left.
      operationId: deleteChat
      parameters:
      - name: user_id
        in: query
        required: true
        description: The userID of the currently logged in user.
        schema:
          type: string
      - name: chat_id
        in: path
        required: true
        description: The chatID of the selected chat.
        schema:
          type: integer
      responses:
        200:
          description: The chat was successfully left.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: The result of the operation (whether or not the chat was also deleted).
        400:
          description: Invalid parameters.
        401:
          description: Either the user isn't logged in or used a user_id parameter that is not theirs.
        500:
          description: Internal server error.
  
  
  
  /users:
    get:
      tags:
      - users
      summary: Retrieves one or more users from the system.
      operationId: users
      parameters:
      - name: user_id
        in: query
        description: The userID to query the system with, or a comma-separated value of userIDs
        schema:
          type: string
      - name: limit
        in: query
        description: The maximum number of elements to be returned. Required if user_id is not present
        schema:
          type: integer
      - name: offset
        in: query
        description: The offset from where to start querying the elements. Required if user_id is not present
        schema:
          type: integer
      responses:
        200:
          description: A User object if a single userID was provided, or an array of Users (or null if the correspondent User was not found).
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      metadata:
                        type: object
                        properties:
                          total:
                            type: integer
                  - $ref: '#/components/schemas/User'
        404:
          description: User not found, if a single userID was provided.
  # Line section
  /lines:
    get:
      tags:
      - line
      summary: Gets all lines.
      operationId: getAllLines
      parameters:
      - name: limit
        in: query
        description: The offset in selecting lines
        required: true
        schema:
          type: integer
      - name: offset
        in: query
        description: The number of selected lines
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Line'
                  metadata:
                    type: object
                    properties:
                      total:
                        type: integer
        401:
          description: The user isn't logged in.
        500:
          description: Internal server error.
    post:
      tags:
      - line
      summary: Creates new geolocalized line
      description: This can only be done by the logged user.
      operationId: createLine
      parameters:
      - name: line_user_id
        in: query
        description: The userID of the current user
        required: true
        schema:
          type: string
      - name: line_start_lat
        in: query
        description: The latitude of the starting point of the line
        required: true
        schema:
          type: number
      - name: line_start_lon
        in: query
        description: The longitude of the starting point of the line
        required: true
        schema:
          type: number
      - name: line_end_lat
        in: query
        description: The latiude of the ending point of the line
        required: true
        schema:
          type: number
      - name: line_end_lon
        in: query
        description: The longitude of the ending point of the line
        required: true
        schema:
          type: number
      - name: line_name
        in: query
        description: The name of the line
        required: true
        schema:
          type: string
      - name: line_description
        in: query
        description: A description of the line
        required: true
        schema:
          type: string
      responses:
        201:
          description: The line was successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  line_id:
                    type: integer
                    description: The lineID of the newly created line.
        400:
          description: Invalid parameters.
        401:
          description: The user isn't logged in.
        500:
          description: Internal server error.

  /lines/{lineID}:
    get:
      tags:
      - line
      summary: Get line by lineID
      operationId: getLineByID
      parameters:
      - name: lineID
        in: path
        description: The line that needs to be fetched.
        required: true
        schema:
          type: number
      responses:
        200:
          description: Line successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Line'
        400:
          description: Invalid parameters.
        401:
          description: The user isn't logged in.
        404:
          description: Line not found.
        500:
          description: Internal server error.

#Review's Section
  /review:
    get:
      tags:
      - review
      summary: Get all reviews (without image path).
      operationId: getAllReviews
      parameters:
          - name: limit
            in: query
            description: limit number for showing reviews
            required: true
            schema:
                type: number
          - name: offset
            in: query
            description: offset number for showing reviews.
            required: true
            schema:
                type: number
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
                  metadata:
                    type: object
                    properties:
                      total:
                        type: integer
        401:
          description: The user isn't logged in.
        500:
          description: Internal server error.
    post:
      tags:
      - review
      summary: Create new review
      description: Create a new review (this can only be done by the logged in user).
      operationId: createReview
      parameters:
      - name: review_user_id
        in: query
        description: The userID of the current user
        required: true
        schema:
          type: string
      - name: review_line_id
        in: query
        description: The lineID of the line that's going to be reviewed
        required: true
        schema:
          type: number
      - name: review_rating
        in: query
        description: Line's rating
        required: true
        schema:
          type: number
      - name: review_description
        in: query
        description: Line's description
        required: true
        schema:
          type: string
      requestBody:
        description: A JPG, PNG, GIF form-encoded file representing the actual photo to be set as line reivew image
        required: false
        content:
          image/*:
            schema:
              type: string
              format: binary
      responses:
        201:
          description: The review was successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  review_id:
                    type: integer
                    description: The reviewID of the newly created review.
                  photo_path:
                    type: string
                    description: The photo path of the photo, if one was provided.
        400:
          description: Invalid parameters.
        401:
          description: The user isn't logged in.
        500:
          description: Internal server error.
  /review/{review_id}:
    get:
      tags:
      - review
      summary: Get review by review_id, if any photo is associated to it, it will also show the path for those pictures.
      operationId: getReviewByID
      parameters:
      - name: review_id
        in: path
        description: The review that needs to be fetched.
        required: true
        schema:
          type: number
      responses:
        200:
          description: Review successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review_With_Photo_Path'
        400:
          description: Invalid parameters.
        401:
          description: The user isn't logged in.
        404:
          description: Review not found.
        500:
          description: Internal server error.

  /retrieve:
    get:
      tags:
        - line
      summary: Retrieve nearby lines
      description: Given latitude and longitude, this function retrieves lines within a certain radius of 0.1 km
      operationId: retrieveline
      parameters:
        - name: selected_latitude
          in: query
          description: The latitude of the point of interest
          required: true
          schema:
            type: number
        - name: selected_longitude
          in: query
          description: The longitude of the point of interest
          required: true
          schema:
            type: number
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Line'
        400:
          description: Invalid parameters.
        401:
          description: The user isn't logged in.
        500:
          description: Internal server error.

  /photo:
    get:
      tags:
        - review
        - photo
      summary: Retrieve review photo path.
      description: Allows to retrieve the photo path of an existing review if it exists.
      operationId: photoRetrieve
      parameters:
        - name: review_id
          in: query
          description: The id of the review of which you want the image.
          required: true
          schema:
            type: number
      responses:
        200:
          description: Review successfully retrieved.
          content:
            application/json:
              schema:
                type: string
                description: The photo path of the review image.
        400:
          description: Invalid parameters.
        401:
          description: The user isn't logged in.
        404:
          description: Review not found.
        500:
          description: Internal server error.
    post:
      tags:
        - review
        - photo
      summary: Insert photo of review.
      description: Allows to insert a photo of an existing review.
      operationId: photoInsert
      parameters:
        - name: photo_review_id
          in: query
          description: The id of the review you want to add the photo.
          required: true
          schema:
            type: number
      requestBody:
        description: A JPG, PNG, GIF form-encoded file representing the actual photo to be set as review image
        required: true
        content:
          image/*:
            schema:
              type: string
              format: binary
      responses:
        201:
          description: The photo was successfully added to the review.
          content:
            application/json:
              schema:
                type: object
                properties:
                  photo_id:
                    type: integer
                    description: The photoID of the newly created photo.
        400:
          description: Invalid parameters.
        401:
          description: The user isn't logged in.
        500:
          description: Internal server error.

components:
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: string
        user_name:
          type: string
        user_rank:
          type: integer
          format: int64
    Line:
      type: object
      properties:
        line_id:
          type: integer
          format: int64
        line_user_id:
          type: string
        line_start_lat:
          type: number
          format: float
        line_start_lon:
          type: number
          format: float
        line_end_lat:
          type: number
          format: float
        line_end_lon:
          type: number
          format: float
        line_name:
          type: string
        line_description:
          type: string
    Review:
      type: object
      properties:
        review_id:
          type: integer
          format: int64
        review_user_id:
          type: string
        review_line_id:
          type: integer
          format: int64
        review_rating:
          type: integer
          format: int64
        review_description:
          type: string
    Review_With_Photo_Path:
        type: object
        properties:
            review_id:
                type: integer
                format: int64
            review_user_id:
                type: string
            review_line_id:
                type: integer
                format: int64
            review_rating:
                type: integer
                format: int64
            review_description:
                type: string
            review_photo_path:
                type: string
    Message:
      type: object
      properties:
        message_id:
          type: integer
          format: int64
        message_datetime:
          type: string
        message_text:
          type: string
        message_chat_id:
          type: integer
          format: int64
        message_user_id:
          type: string

