openapi: 3.0.1
info:
  title: SlackApp
  description: SlackApp is an application that proposes to create a virtual space
    for [slackliners](https://en.wikipedia.org/wiki/Slacklining) where they can share
    their slackline position with other members, along with rating and reviewing them
    on a map.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: "v1"
servers:
- url: https://se2-project.herokuapp.com/api/v1/users
tags:
- name: line
  description: APIs for creating and retrieving lines
- name: review
  description: APIs for creating and retrieving reviews
- name: photo
  description: APIs for adding and retrieving photos
- name: users
  description: APIs for retrieving users
- name: auth
  description: APIs for creating new users and authenticating to the system
paths:
  /users:
    get:
      tags:
      - users
      summary: Retrieves one or more users from the system.
      operationId: users
      parameters:
      - name: user_id
        in: query
        description: The userID to query the system with, or a comma-separated value
          of userIDs
        schema:
          type: string
      - name: limit
        in: query
        description: The maximum number of elements to be returned. Required if user_id
          is not present
        schema:
          type: integer
      - name: offset
        in: query
        description: The offset from where to start querying the elements. Required
          if user_id is not present
        schema:
          type: integer
      responses:
        200:
          description: A User object if a single userID was requested, or an array of Users.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/User'
                  - type: array
                    items:
                      $ref: '#/components/schemas/User'

  /signup:
    post:
      tags:
      - auth
      summary: Creates a new user in the system.
      operationId: signup
      parameters:
      - name: user_id
        in: query
        description: The userID to log in with
        required: true
        schema:
          type: string
      - name: user_name
        in: query
        description: The displayed name for the user
        required: true
        schema:
          type: string
      - name: user_password
        in: query
        description: The password matching the userID
        required: true
        schema:
          type: string
      responses:
        201:
          description: User successfully created
          content: {}
        400:
          description: Bad request (invalid number of parameters or content)
          content: {}
  /login:
    post:
      tags:
      - auth
      summary: Authenticates an user using ID and password.
      operationId: login
      parameters:
      - name: user_id
        in: query
        description: The userID to log in with
        required: true
        schema:
          type: string
      - name: user_password
        in: query
        description: The password matching the userID
        required: true
        schema:
          type: string
      responses:
        200:
          description: User successfully logged in
          content: {}
        400:
          description: Non-existant combination of userID and password, or invalid parameters
          content: {}


  # Line section
  /lines:
    get:
      tags:
      - line
      summary: Get all lines
      description: This can only be done by the logged user.
      operationId: getAllLines
      parameters:
      - name: limit
        in: query
        description: The offset in selecting lines
        required: true
        schema:
          type: integer
      - name: offset
        in: query
        description: The number of selected lines
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Line'
                  metadata:
                    type: object
                    properties:
                      total:
                        type: integer
        401:
          description: Unauthorized
          content: {}
        500:
          description: Error while getting Line
          content: {}
    post:
      tags:
      - line
      summary: Create new geolocalized line
      description: This can only be done by the logged user.
      operationId: createLine
      parameters:
      - name: line_user_id
        in: query
        description: The userID of the current user
        required: true
        schema:
          type: string
      - name: line_start_lat
        in: query
        description: The latitude of the starting point of the line
        required: true
        schema:
          type: number
      - name: line_start_lon
        in: query
        description: The longitude of the starting point of the line
        required: true
        schema:
          type: number
      - name: line_end_lat
        in: query
        description: The latiude of the ending point of the line
        required: true
        schema:
          type: number
      - name: line_end_lon
        in: query
        description: The longitude of the ending point of the line
        required: true
        schema:
          type: number
      - name: line_name
        in: query
        description: The name of the line
        required: true
        schema:
          type: string
      - name: line_description
        in: query
        description: A description of the line
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Wrong line info
          content: {}
        401:
          description: Unauthorized
          content: {}

  /lines/{lineID}:
    get:
      tags:
      - line
      summary: Get line by lineID
      operationId: getLineByID
      parameters:
      - name: lineID
        in: path
        description: The line that needs to be fetched.
        required: true
        schema:
          type: number
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Line'
        400:
          description: Error while getting Line
          content: {}
        401:
          description: Unauthorized
          content: {}
        404:
          description: Line with provided LineID not found
          content: {}

#Review's Section
  /review:
    get:
      tags:
      - review
      summary: Get all reviews (without image path).
      operationId: getAllReviews
      parameters:
          - name: limit
            in: query
            description: limit number for showing reviews
            required: true
            schema:
                type: number
          - name: offset
            in: query
            description: offset number for showing reviews.
            required: true
            schema:
                type: number
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                  items:
                    $ref: '#/components/schemas/Review'
        500:
          description: Error while getting Review. Internal Error.
          content: {}
    post:
      tags:
      - review
      summary: Create new review
      description: Create a new review (this can only be done by the logged in user).
      operationId: createReview
      parameters:
      - name: review_user_id
        in: query
        description: The userID of the current user
        required: true
        schema:
          type: string
      - name: review_line_id
        in: query
        description: The lineID of the line that's going to be reviewed
        required: true
        schema:
          type: number
      - name: review_rating
        in: query
        description: Line's rating
        required: true
        schema:
          type: number
      - name: review_description
        in: query
        description: Line's description
        required: true
        schema:
          type: string
      - name: review_image
        in: query
        description: Line's picture
        required: false
        schema:
            type: object
      responses:
        201:
          description: successful operation, review created
          content: {}
        400:
          description: Wrong review info
          content: {}
  /review/{review_id}:
    get:
      tags:
      - review
      summary: Get review by review_id, if any photo is associated to it, it will also show the path for those pictures.
      operationId: getReviewByID
      parameters:
      - name: review_id
        in: path
        description: The review that needs to be fetched.
        required: true
        schema:
          type: number
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review_With_Photo_Path'
        400:
          description: Error while getting Review. Review_Id not provided.
          content: {}
        500:
          description: Review with provided ReviewID not found
          content: {}

  /retrieve:
    get:
      tags:
        - line
      summary: Retrieve nearby lines
      description: Given latitude and longitude, this function retrieves lines within a certain radius of 0.1 km
      operationId: retrieveline
      parameters:
        - name: selected_latitude
          in: query
          description: The latitude of the point of interest
          required: true
          schema:
            type: number
        - name: selected_longitude
          in: query
          description: The longitude of the point of interest
          required: true
          schema:
            type: number
      responses:
        201:
          description: Successfull operation, retrieving nearby lines...
        400:
          description: Wrong request

  /photo:
    get:
      tags:
        - review
        - photo
      summary: Retrieve review photo path.
      description: Allows to retrieve the photo path of an existing review if it exists.
      operationId: photoRetrieve
      parameters:
        - name: review_id
          in: query
          description: The id of the review of which you want the image.
          required: true
          schema:
            type: number
      responses:
        201:
          description: Photo path returned
        400:
          description: Wrong request
    post:
      tags:
        - review
        - photo
      summary: Insert photo of review.
      description: Allows to insert a photo of an existing review.
      operationId: photoInsert
      parameters:
        - name: photo_review_id
          in: query
          description: The id of the review you want to add the photo.
          required: true
          schema:
            type: number
        - name: review_image
          in: body
          description: The actual photo to be set as review image
          required: true
          schema:
            type: JPG, PNG, GIF
      responses:
        201:
          description: Photo added to review
        400:
          description: Wrong request

components:
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: string
        user_name:
          type: string
        user_rank:
          type: integer
          format: int64
    Line:
      type: object
      properties:
        line_id:
          type: integer
          format: int64
        line_user_id:
          type: string
        line_start_lat:
          type: number
          format: float
        line_start_lon:
          type: number
          format: float
        line_end_lat:
          type: number
          format: float
        line_end_lon:
          type: number
          format: float
        line_name:
          type: string
        line_description:
          type: string
    Review:
      type: object
      properties:
        review_id:
          type: integer
          format: int64
        review_user_id:
          type: string
        review_line_id:
          type: integer
          format: int64
        review_rating:
          type: integer
          format: int64
        review_description:
          type: string
    Review_With_Photo_Path:
        type: object
        properties:
            review_id:
                type: integer
                format: int64
            review_user_id:
                type: string
            review_line_id:
                type: integer
                format: int64
            review_rating:
                type: integer
                format: int64
            review_description:
                type: string
            review_photo_path:
                type: string
    Photo:
      type: object
      properties:
        photo_id:
         type: integer
         format: int64
        photo_review_id:
         type: integer
         format: int64
        photo_path:
         type: string
